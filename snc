login_page_url=https://net2.sharif.edu/login
conenction_check_url=google.com
configs_file="$HOME/.local/share/snc"
favorite_ssids_file="$configs_file/ssids.conf"
username_password_file="$configs_file/username_password.conf"

load_username_password(){
        if test -s $username_password_file;
        then
                username=$(awk '/username/ {split($1,a,":"); print a[2]}' $username_password_file)
                encrypted_password=$(awk '/password/ {split($1,a,":"); print a[2]}' $username_password_file)
                password=$(echo $encrypted_password | openssl enc -aes-128-cbc -iter 29 -a -d -salt -pass pass:asdffdsa)
	else
                echo "Please first set your net2 username and password using init command."
		echo "See --help or -h"
                exit 1
        fi
}

load_favorite_ssids(){
        if test -s $favorite_ssids_file;
        then
                online_favorite_ssids=$(nmcli device wifi list | grep -wi -f $favorite_ssids_file | cut -d '*' -f 2 | awk '{print $1}')
                ssids=($online_favorite_ssids)
        else
                echo "There is no modem id in your list. Add one with newmodem command."
                echo "See --help or -h"
		exit 1
        fi
}

connect_to_modems(){
        for ssid in "${ssids[@]}"
        do    
                nmcli device wifi connect $ssid > /dev/null 2>&1
                connection=$(ping -q -w 5 -c 1 $login_page_url > /dev/null 2>&1 && echo 0 || echo 1)
                if [ $connection -eq 0 ];
                then    
                        echo Successfully connected to $ssid
                        curl -Ls -d "username=$username&password=$password" -X POST $login_page_url
                        exit 0
                fi
        done
        echo "Connecting failed"
	echo "Make sure you are close to one of your modems in list"
}

connect(){
	nmcli radio wifi on
	sleep 2

	load_username_password
	load_favorite_ssids

	connect_to_modems
}

add_modem_ssid(){
	if [ -z $1 ];
	then
		echo "Please type modem ssid"
		echo "See --help' or -h"
		exit 1
	else
		new_ssids=($@)
		for (( i=1; i<=($#-1); i++ ))
		do
   			echo "${new_ssids[$i]}" >> $favorite_ssids_file
		done
	fi
}

configure(){
	username=$1
	password=$2
	if [ -z $1 ];
	then
		read -p "sharif-id username:" username
		read -s -p "sharif-id password:" password
		echo
	elif [ -z $2 ];
	then
		echo "$1 assumed as your net2 username"
		read -s -p "sharif-id password:" password
	fi

	encrypted_password=$(echo $password | openssl enc -aes-128-cbc -iter 29 -a -salt -pass pass:asdffdsa)
	echo -e "username:$username\npassword:$encrypted_password" > $username_password_file
}

show_favorite_modems(){
	if test -s $favorite_ssids_file;
	then
		cat $favorite_ssids_file
	else
		echo "There is no modem id in your list. Add one with newmodem command."
		echo "See --help or -h"
		exit 1
	fi
}

remove_modem_ssid(){
	ssids=$(echo $@ | awk '{gsub(" ","\\|",$0); print $0}')
	grep -wi -v "$ssids" $favorite_ssids_file >> tmp.txt
	mv tmp.txt $favorite_ssids_file
}

status(){
	ping -q -w 5 -c 1 $conenction_check_url > /dev/null &>1 && echo -e '\033[92m'connect || echo -e '\033[91m'no connection
}

help(){
	echo "\`snc\` connects sharif modems and log you in to net2 in an EZ way!"
	echo 
	echo "	usage: snc { COMMAND }  	snc does the rest :)"
  	echo

	echo "commands:"
        echo "  config | co <username> <password>  gives your net2 username and password"
	echo "                                  and then log in to net2.sharif.edu. "
        echo "  connect | c                     connects to one of modems you added befor."
	echo "  newmodem | n <modem>...         adds a new modem id to your list."
	echo "  remove | r <modem>...           remove a modem id from list."
	echo "  show | s                        shows modem ssids you added before."
	echo 

	echo "arguments:"
	echo "  --help | -h                     shows this usefull help!"
	exit 0
}

case $1 in
        connect | c)
		connect
		;;
        config | co)
		configure $2 $3 
                ;;
        newmodem | n)
                add_modem_ssid $@
                ;;
	remove | r)

		remove_modem_ssid $@
		;;
	show | sh)
		show_favorite_modems
		;;
	status | s)
		status
		;;
	--help | -h)
		help
                ;;
	*)
		echo "Find what command you need"
		help
		;; 
esac

